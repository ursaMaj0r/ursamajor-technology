<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://ursamajor.technology/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ursamajor.technology/" rel="alternate" type="text/html" /><updated>2022-09-25T22:01:32+00:00</updated><id>https://ursamajor.technology/feed.xml</id><title type="html">Ursamajor.technology</title><subtitle>PowerShell Blog</subtitle><entry><title type="html">Securely access your homelab services from anywhere!</title><link href="https://ursamajor.technology/2022/09/25/cloudflared/" rel="alternate" type="text/html" title="Securely access your homelab services from anywhere!" /><published>2022-09-25T00:00:00+00:00</published><updated>2022-09-25T00:00:00+00:00</updated><id>https://ursamajor.technology/2022/09/25/cloudflared</id><content type="html" xml:base="https://ursamajor.technology/2022/09/25/cloudflared/">&lt;p&gt;Let’s setup a reverse proxy that can be used to access any of your internally hosted apps without opening a single port on your router!
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Self hosting applications is growing in popularity and for services to be useful, we want them to be available both at home and on the go. There are many different ways to make an application that is running on your local network externally accessible, but some can open you up to a high degree of risk. You should always consider if it is truly necessary before putting an application online and use a VPN for high risk applications. Once something is online, it is hackable.&lt;/p&gt;

&lt;h1 id=&quot;cloudflared&quot;&gt;Cloudflared&lt;/h1&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;75%&quot; src=&quot;/assets/images/posts/cloudflared/cloudflared.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloudflared is a secure tunnel application that is available for free from Cloudflare. It can run on many different operating systems, including as a docker container. The application creates a secure tunnel to Cloudflare without opening any ports on your network and can be deployed to any environment to serve as a web application proxy. This provides a high degree of security, because it forces connections to route through Cloudflare which provides DDoS protection as well as serving as a web application firewall or WAF.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;h3 id=&quot;create-a-cloudflare-account&quot;&gt;Create a Cloudflare account&lt;/h3&gt;
&lt;p&gt;The first thing you will need to do is create a Cloudflare account and register your domain. This can be done &lt;a href=&quot;https://dash.cloudflare.com/sign-up&quot;&gt;here&lt;/a&gt;. If you don’t have a domain, you can purchase one from Cloudflare or transfer in your existing one by adding a site:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;75%&quot; src=&quot;/assets/images/posts/cloudflared/addSite.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that you can use an external registrar, but you must transfer your DNS nameservers over to Cloudflare for the traffic to be properly routed through their systems.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-cloudflare-access&quot;&gt;Setting up Cloudflare Access&lt;/h3&gt;
&lt;p&gt;Next we will need to setup &lt;a href=&quot;https://dash.teams.cloudflare.com&quot;&gt;Cloudflare access&lt;/a&gt; which will hold our application configurations. The free tier should be sufficient for most environments. After you have gotten into the Zero Trust Dashboard, navigate to &lt;strong&gt;Access&lt;/strong&gt; –&amp;gt; &lt;strong&gt;Tunnels&lt;/strong&gt; to create a tunnel.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;75%&quot; src=&quot;/assets/images/posts/cloudflared/addTunnel.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;deploying-the-agent&quot;&gt;Deploying the agent&lt;/h3&gt;
&lt;p&gt;Once you have created a tunnel, the next step is to deploy the cloudflared agent to a network that can access the application locally. The overview tab for the tunnel provides instructions for most operating systems. Below is an example using docker compose:&lt;/p&gt;

&lt;div&gt;
    &lt;code class=&quot;custom-codeblock&quot;&gt;
---
version: &quot;3&quot;
networks:
  frontend:
    proxynet: true
services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CF_TOKEN}
    networks:
      - proxynet
    &lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;The application authenticates to Cloudflare servers using a token. This token should be considered a secret and protected using an environment variable. In the above example, we use ${CF_TOKEN}. You can find your token in the tunnel overview page. The container has also been added to the proxynet network, which is where the application is hosted.&lt;/p&gt;

&lt;h3 id=&quot;add-an-application&quot;&gt;Add an Application&lt;/h3&gt;
&lt;p&gt;The next step will be to add the application to your tunnel. This can be done from the public hostnames tab on the tunnel configuration menu. Let’s use Home Assistant running locally over port 8123 as an example:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;75%&quot; src=&quot;/assets/images/posts/cloudflared/addApp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point if everything is working, the application should be accessible from external networks.&lt;/p&gt;

&lt;h3 id=&quot;setup-an-authentication-provider&quot;&gt;Setup an Authentication Provider&lt;/h3&gt;
&lt;p&gt;It is a good idea to add an authentication provider, especially one that protects against brute force attacks for any application that is publicly available. To do this navigate to &lt;strong&gt;Settings&lt;/strong&gt; –&amp;gt; &lt;strong&gt;Authentication&lt;/strong&gt;. Cloudflare supports a number of providers:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;75%&quot; src=&quot;/assets/images/posts/cloudflared/addAuth.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-access-policies&quot;&gt;Setup Access Policies&lt;/h3&gt;
&lt;p&gt;The final step is to setup some access policies. These help to limit who can access your application, where they can access it, and more! To get started, click on the applications menu on the sidebar and add a self hosted app.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;75%&quot; src=&quot;/assets/images/posts/cloudflared/addPolicy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure to select your authentication method that we setup in the previous step before continuing to the policy page. Each app will have its own policy, but policy groups can be created to quickly select between different templates based on how risky the application may be. For detailed information on policies, please see &lt;a href=&quot;https://developers.cloudflare.com/cloudflare-one/policies/access/&quot;&gt;cloudflared docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consider adding rules that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Block countries that you likely will not access from&lt;/li&gt;
  &lt;li&gt;Use the WARP client to provide device posture checks&lt;/li&gt;
  &lt;li&gt;Add MFA&lt;/li&gt;
  &lt;li&gt;Block bots or other reputation filters&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jeff</name></author><category term="Home Assistant" /><category term="Cyber" /><category term="IoT" /><category term="Cloudflare" /><category term="Automate Everything" /><summary type="html">Let’s setup a reverse proxy that can be used to access any of your internally hosted apps without opening a single port on your router!</summary></entry><entry><title type="html">PowerShell Secrets, it’s Uber Simple!</title><link href="https://ursamajor.technology/2022/09/18/PSSecrets/" rel="alternate" type="text/html" title="PowerShell Secrets, it’s Uber Simple!" /><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><id>https://ursamajor.technology/2022/09/18/PSSecrets</id><content type="html" xml:base="https://ursamajor.technology/2022/09/18/PSSecrets/">&lt;p&gt;“Three may keep a secret, if two of them are dead.”  ―Benjamin Franklin&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Creating a PowerShell script to automate a task saves us time and helps to reduce repetitive tasks. Scripts often connect multiple resources together, making them an easy pivot point for a bad actor. It may be tempting to include a password, API key, or secret in a PowerShell file, but this can easily turn a good script into a ticking time bomb. Luckily, PowerShell makes it easy to interact with secret vaults or even create one locally on any Windows, Linux or Mac device with the SecretManagement and SecretStore modules.&lt;/p&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h1&gt;

&lt;h3 id=&quot;installing-the-modules&quot;&gt;Installing the Modules&lt;/h3&gt;
&lt;p&gt;In order to setup the modules for the first time, run the following code in an administrative command prompt:&lt;/p&gt;

&lt;div&gt;
    &lt;code class=&quot;custom-codeblock&quot;&gt;Install-Module Microsoft.PowerShell.SecretManagement, Microsoft.PowerShell.SecretStore&lt;/code&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-vault&quot;&gt;Create a Vault&lt;/h3&gt;
&lt;p&gt;Next, we will create a vault to hold our secrets. The easiest way to do this is to use the SecretStore vault, which creates a locally encrypted file. However, the SecretManagement utilities can also be connected to other more common vaults such as KeePass, LastPass, Azure KeyVault and Hashicorp Vault.&lt;/p&gt;

&lt;p&gt;To do this, run the following command:&lt;/p&gt;

&lt;div&gt;
    &lt;code class=&quot;custom-codeblock&quot;&gt;Register-SecretVault -Name KrabbyPattySecretFormula -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault&lt;/code&gt;
&lt;/div&gt;

&lt;h3 id=&quot;store-a-secret&quot;&gt;Store a Secret&lt;/h3&gt;
&lt;p&gt;Now it is time to store our secret in the vault.&lt;/p&gt;

&lt;div&gt;
    &lt;code class=&quot;custom-codeblock&quot;&gt;Set-Secret -Name Ingredients -Secret &quot;Bun,Sea Cheese, Sea Lettuce, Sea Tomatoes, Pickles, Ketchup, Mustard, Mayonnaise, Sea Onions, Patty, Secret Sauce,Bun&quot;&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;Enter and confirm a password to encrypt your vault. Try to use a long passphase and store it in a password manager for safe keeping!&lt;/p&gt;

&lt;h3 id=&quot;retrieve-a-secret&quot;&gt;Retrieve a Secret&lt;/h3&gt;
&lt;p&gt;After the secret is placed into the vault, we can very easily retrieve it later in a script. Let’s list out all the ingredients in the Krabby Patty secret formula:&lt;/p&gt;

&lt;div&gt;
    &lt;code class=&quot;custom-codeblock&quot;&gt;(Get-Secret -Name Ingredients -Vault KrabbyPattySecretFormula -AsPlainText).Split(',')&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/PSSecrets/secret-formula.png&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;putting-it-all-together&quot;&gt;Putting it all Together&lt;/h1&gt;
&lt;p&gt;In order to unlock the vault we must provide the password interactively. This is obviously not possible during an automated process. The module provices a way to unlock the vault for a one hour period using the below command. It is important to securely store this password using an encrpted file, or ideally an environment variable in a CI/CD pipeline.&lt;/p&gt;

&lt;div&gt;
    &lt;code class=&quot;custom-codeblock&quot;&gt;Unlock-SecretStore -Password $env:vaultPassword&lt;/code&gt;
&lt;/div&gt;

&lt;h3 id=&quot;learn-more&quot;&gt;Learn More&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devblogs.microsoft.com/powershell/secretmanagement-and-secretstore-are-generally-available/&quot;&gt;SecretManagement and SecretStore are Generally Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/powershell/utility-modules/secretmanagement/overview?view=ps-modules&quot;&gt;Overview of the SecretManagement and SecretStore modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xkcd.com/538/&quot;&gt;XKCD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jeff</name></author><category term="PowerShell" /><category term="Cyber" /><category term="Scripts" /><category term="Automate Everything" /><summary type="html">“Three may keep a secret, if two of them are dead.” ―Benjamin Franklin</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ursamajor.technology/assets/images/posts/PSSecrets/security.png" /><media:content medium="image" url="https://ursamajor.technology/assets/images/posts/PSSecrets/security.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">MyDoom</title><link href="https://ursamajor.technology/2022/09/05/MyDoom/" rel="alternate" type="text/html" title="MyDoom" /><published>2022-09-05T00:00:00+00:00</published><updated>2022-09-05T00:00:00+00:00</updated><id>https://ursamajor.technology/2022/09/05/MyDoom</id><content type="html" xml:base="https://ursamajor.technology/2022/09/05/MyDoom/">&lt;p&gt;Reverse engineering the fastest spreading worm to date.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;drac-text-center&quot;&gt;
  &lt;iframe width=&quot;75%&quot; height=&quot;2000&quot; src=&quot;/assets/images/posts/MyDoom/MyDoom.pdf&quot; title=&quot;MyDoom&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;</content><author><name>Jeff</name></author><category term="Cyber" /><category term="Malware" /><category term="Automate Everything" /><summary type="html">Reverse engineering the fastest spreading worm to date.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ursamajor.technology/assets/images/posts/MyDoom/mydoom.png" /><media:content medium="image" url="https://ursamajor.technology/assets/images/posts/MyDoom/mydoom.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Web Application Security - SimpleWebServer</title><link href="https://ursamajor.technology/2022/09/05/SimpleWebServer/" rel="alternate" type="text/html" title="Web Application Security - SimpleWebServer" /><published>2022-09-05T00:00:00+00:00</published><updated>2022-09-05T00:00:00+00:00</updated><id>https://ursamajor.technology/2022/09/05/SimpleWebServer</id><content type="html" xml:base="https://ursamajor.technology/2022/09/05/SimpleWebServer/">&lt;p&gt;A python project that can be used to learn about common attack vectors against web applications.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;simplewebserver&quot;&gt;SimpleWebServer&lt;/h1&gt;

&lt;p&gt;Code:  &lt;a style=&quot;font-size: calc(10px + .2vw)&quot; href=&quot;https://github.com/ursaMaj0r/python-SimpleWebServer&quot;&gt;Click to view code&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;general&quot;&gt;General&lt;/h2&gt;

&lt;p&gt;SimpleWebServer is a basic HTTP/HTTPS server that supports server side execution. It was designed for educational purposes and is vulnerable to many common web exploits such as SQL injection, command injection, and directory traversal. It should not be deployed to production environments.&lt;/p&gt;

&lt;h3 id=&quot;starting-the-server&quot;&gt;Starting the Server&lt;/h3&gt;

&lt;p&gt;Example 1: HTTP&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 testServer.py http&lt;/code&gt;&lt;br /&gt;
Example 2: HTTPS&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 testServer.py https&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;server-side-execution&quot;&gt;Server Side Execution&lt;/h2&gt;

&lt;h3 id=&quot;get&quot;&gt;Get&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Start an Instance of Simple Web Server&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 testServer.py https&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://localhost/welcome.php?first=Harry&amp;amp;last=Potter&quot; title=&quot;https://localhost/welcome.php?first=Harry&amp;amp;last=Potter&quot;&gt;https://localhost/welcome.php?first=Harry&amp;amp;last=Potter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws1.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;

&lt;p&gt;This web page will take in two query parameters (first and last) and use them to generate a welcome page.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// localhost/welcome.php?first=Harry&amp;amp;last=Potter&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'first'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'last'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;b&amp;gt;Hello &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ln&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;post&quot;&gt;Post&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Start an Instance of Simple Web Server&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 testServer.py https&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to &lt;a href=&quot;https://localhost/hello.html&quot; title=&quot;https://localhost/hello.html&quot;&gt;https://localhost/hello.html&lt;/a&gt; and enter your name in the form!&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws2.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;source-code-1&quot;&gt;Source Code&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;This web form will take in two parameters (first and last) and use them to post to welcome.php and dynamically generate a welcome page.

```php
&amp;lt;?php
    $fn = $_POST['first'];
    $ln = $_POST['last'];

    echo &quot;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt; $fn $ln!&quot;;
?&amp;gt;
```
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;expected-behavior&quot;&gt;Expected Behavior&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws3.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;command-injection&quot;&gt;Command Injection&lt;/h2&gt;

&lt;p&gt;HTTP web servers that execute server side code and do not properly parse user input can be vulnerable to command injection. This type of exploit occurs when a bad actor uses a carefully crafted HTTP request to execute arbitrary commands on the host web server. Unsafe data can be injected into all areas of the request including headers, cookies and even the message body. Since the code is executed with the same privileges as the application, it is especially important to avoid running web applications as root where possible.&lt;/p&gt;

&lt;h3 id=&quot;in-the-wild&quot;&gt;In The Wild&lt;/h3&gt;

&lt;p&gt;One of the most commonly known command injection exploits was dubbed “Shellshock” and occurred in 2014. At its’ peak, there were upwards of 1.5 million attacks per day using this technique.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Start an Instance of Simple Web Server&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 testServer.py https&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;a href=&quot;https://localhost/ping.html&quot; title=&quot;https://localhost/ping.html&quot;&gt;https://localhost/ping.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws4.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code-2&quot;&gt;Source Code&lt;/h3&gt;

&lt;p&gt;This web form can be used to ping hosts from the web server. It takes a single input string and passes that to the ping command. &lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt; that the function &lt;strong&gt;does not&lt;/strong&gt; sanitize the input for any special characters like semicolons or confirm that it actually a valid host.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;. &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET['host']&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;);
print_r(implode(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;));
?&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;expected-behavior-1&quot;&gt;Expected Behavior&lt;/h3&gt;

&lt;p&gt;Normally when given a valid FQDN or IP address, the web server will return the results of the ping.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws5.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;malicious-request&quot;&gt;Malicious Request&lt;/h2&gt;

&lt;p&gt;However with the simple introduction of a semi-colon, the server will also execute trailing commands on the host. This can be used to execute arbitrary code, access files outside the web root directory, and even delete files on the web server.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws6.png&quot; width=&quot;20%&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/SimpleWebServer/sws7.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;</content><author><name>Jeff</name></author><category term="Cyber" /><category term="Python" /><category term="Automate Everything" /><summary type="html">A python project that can be used to learn about common attack vectors against web applications.</summary></entry><entry><title type="html">PrintNightmare</title><link href="https://ursamajor.technology/2021/11/28/printNightmare/" rel="alternate" type="text/html" title="PrintNightmare" /><published>2021-11-28T00:00:00+00:00</published><updated>2021-11-28T00:00:00+00:00</updated><id>https://ursamajor.technology/2021/11/28/printNightmare</id><content type="html" xml:base="https://ursamajor.technology/2021/11/28/printNightmare/">&lt;p&gt;My recent project on how to mitigate against PrintNightmare along with a live demo of the exploit!&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;drac-text-center&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://youtube.com/embed/UD0jGt3_5_k&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;drac-text-center&quot;&gt;
     &lt;a style=&quot;font-size: calc(10px + .2vw)&quot; href=&quot;https://github.com/ursaMaj0r/cyber-research-projects/blob/main/PrintNightmare/PrintNightmare.pdf&quot;&gt;Click to view slides - PrintNightmare&lt;/a&gt;
&lt;/div&gt;</content><author><name>Jeff</name></author><category term="Microsoft" /><category term="Exploit" /><category term="Cyber" /><category term="Automate Everything" /><summary type="html">My recent project on how to mitigate against PrintNightmare along with a live demo of the exploit!</summary></entry><entry><title type="html">Lightweight Cryptography</title><link href="https://ursamajor.technology/2021/11/22/lightweightCrypto/" rel="alternate" type="text/html" title="Lightweight Cryptography" /><published>2021-11-22T00:00:00+00:00</published><updated>2021-11-22T00:00:00+00:00</updated><id>https://ursamajor.technology/2021/11/22/lightweightCrypto</id><content type="html" xml:base="https://ursamajor.technology/2021/11/22/lightweightCrypto/">&lt;p&gt;My recent project on how the emergence of lightweight cryptography  will deliver confidentiality and integrity to the network of things!&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;drac-text-center&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Kp1ogr5iEYY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;drac-text-center&quot;&gt;
     &lt;a style=&quot;font-size: calc(10px + .2vw)&quot; href=&quot;https://github.com/ursaMaj0r/cyber-research-projects/blob/main/LightweightCrypto/Lightweight%20Cryptography%20Delivers%20Confidentiality%20and%20Integrity%20to%20Resource%20Constrained%20Devices%20FINAL.pdf&quot;&gt;Click to read full paper - Lightweight Cryptography Delivers Confidentiality and Integrity to Resource Constrained Devices&lt;/a&gt;
&lt;/div&gt;</content><author><name>Jeff</name></author><category term="Crypto" /><category term="IoT" /><category term="Cyber" /><category term="Automate Everything" /><summary type="html">My recent project on how the emergence of lightweight cryptography will deliver confidentiality and integrity to the network of things!</summary></entry><entry><title type="html">PowerShell Port Scanner with Netcat</title><link href="https://ursamajor.technology/2021/10/04/ps-nc-scanner/" rel="alternate" type="text/html" title="PowerShell Port Scanner with Netcat" /><published>2021-10-04T21:00:00+00:00</published><updated>2021-10-04T21:00:00+00:00</updated><id>https://ursamajor.technology/2021/10/04/ps-nc-scanner</id><content type="html" xml:base="https://ursamajor.technology/2021/10/04/ps-nc-scanner/">&lt;p&gt;Yet another netcat port scanner…but with a twist of PowerShell.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The below PowerShell Core script was created using netcat to scan a target host for a list of open ports. I chose to write the script in PowerShell Core because it can be run on any machine (not just Windows). The script works by iterating through a list of ports utilizing the zero I/O mode of netcat. Simply put, it attempts to open a connection on a specified TCP port with no data in the payload. This quickly can be used to determine if the port is open or closed and then is reported back to the user. In order to improve speed, I have chosen to set the timeout to one second using the w parameter.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to Use&lt;/h2&gt;

&lt;p&gt;The script takes in the following parameters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt; - IP Address or FQDN of computer that will be scanned&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PortRange&lt;/strong&gt; - list of ports to scan (can be input as a single value, range, or list)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;openOnly&lt;/strong&gt;  - will only return the ports that were found to be open&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;For the purposes of the examples we will use google.com as the target. We will assume the target is a web server with ports 80 and 443 open (HTTP/HTTPS).&lt;/p&gt;

&lt;h3 id=&quot;example-1-single-port&quot;&gt;Example 1: Single Port&lt;/h3&gt;

&lt;p&gt;The following example can be used to determine if the server accepts HTTP traffic on port 80.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start-PortScan -target google.com  -portRange 80&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;example-2-range-of-ports&quot;&gt;Example 2: Range of Ports&lt;/h3&gt;

&lt;p&gt;The following example can be used to determine if the server has any open ports between 75 and 85.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start-PortScan -target google.com -portRange (75..85)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/ps-nc-scanner/example.png&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;example-3-open-only&quot;&gt;Example 3: Open Only&lt;/h3&gt;

&lt;p&gt;The following example can be used to determine if the server has any open ports between 75 and 85. With the addition of the switch parameter, &lt;em&gt;openOnly&lt;/em&gt;, the results will omit closed ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start-PortScan -target google.com -portRange (75..85) -openOnly&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;script&quot;&gt;Script:&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/ba2b91e022f279fb80bc71b6d01295f3.js&quot;&gt;&lt;/script&gt;</content><author><name>Jeff</name></author><category term="PowerShell" /><category term="Cyber" /><category term="Scripts" /><category term="Automation" /><category term="Automate Everything" /><summary type="html">Yet another netcat port scanner…but with a twist of PowerShell.</summary></entry><entry><title type="html">Did you feed the dog?</title><link href="https://ursamajor.technology/2021/09/14/did-you-feed-the-dog/" rel="alternate" type="text/html" title="Did you feed the dog?" /><published>2021-09-14T21:00:00+00:00</published><updated>2021-09-14T21:00:00+00:00</updated><id>https://ursamajor.technology/2021/09/14/did-you-feed-the-dog</id><content type="html" xml:base="https://ursamajor.technology/2021/09/14/did-you-feed-the-dog/">&lt;p&gt;Have you ever forgotten if you fed the dog breakfast? Or maybe your dog is like mine and is always ready for another meal… Look no further!
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Calli the dog has always been motivated by one thing in life: food. In fact, it motivates her so much she has been know to ask for breakfast &lt;em&gt;one human at a time.&lt;/em&gt; Like most dogs as soon as someone steps into the kitchen in the morning, Calli knows its time for breakfast. However, she also knows that after a delicious meal, there’s a chance for more. She waits patiently for the next person to make their way down to the kitchen, and you guessed it, “Breakfast Time!?!?!”, she exclaims. We needed another way to keep track of this, so I created a system to sort out this conundrum using Home Assistant, our phones, and some NFC Tags!
&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/did-you-feed-the-dog/calli-food.png&quot; class=&quot;center&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;h2 class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Getting Started&lt;/h2&gt;
&lt;h3 id=&quot;before-beginning-this-tutorial-please-make-sure-you-have-the-following&quot;&gt;Before beginning this tutorial, please make sure you have the following:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Home Assistant&lt;/li&gt;
  &lt;li&gt;NFC Tags –&amp;gt; &lt;a href=&quot;https://amzn.to/3tIsnGh&quot;&gt;Purchase Here! (paid link)&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Creating the Helpers&lt;/h2&gt;
&lt;div&gt;
  &lt;div variant=&quot;subtle&quot; class=&quot;drac-box drac-card drac-card-subtle drac-border-cyan drac-p-md drac-m-md&quot;&gt;
    &lt;span class=&quot;drac-text drac-line-height drac-text-red&quot;&gt;Info: &lt;br /&gt; Helpers are used like environment variables and their state can be read or modified by an automation. Some examples include: Input Boolean, Input Datetime, Input Number, Input Select, Input Text and Counter. For detailed info, please review - &lt;a href=&quot;https://www.home-assistant.io/integrations/#automation&quot;&gt;Home Assistant Docs&lt;/a&gt;&lt;/span&gt;
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by opening up the menu to create helpers:
&lt;a href=&quot;https://my.home-assistant.io/redirect/helpers/&quot;&gt;&lt;img src=&quot;https://my.home-assistant.io/badges/helpers.svg&quot; alt=&quot;Open your Home Assistant instance and show your helper entities.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create a helper, select &lt;em&gt;Add helper&lt;/em&gt; at the bottom right of the page.&lt;/p&gt;

&lt;h2 id=&quot;helper-1---counter---dog-meal-counter&quot;&gt;Helper 1 - Counter - Dog Meal Counter&lt;/h2&gt;
&lt;p&gt;The first helper that we create will be a counter. It will be used to keep track of the number of times that we fed our dog and will reset at midnight. It needs to have a maximum value of &lt;strong&gt;2&lt;/strong&gt; (or more depending on Fido) and a step size of  &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/counter.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;helper-2--3---input-boolean---dog-breakfast--dog-dinner&quot;&gt;Helper 2 &amp;amp; 3 - Input Boolean - Dog Breakfast &amp;amp; Dog Dinner&lt;/h2&gt;
&lt;p&gt;The next two helpers that we need are toggles. They will be used to keep track of which meals our dog has ate. I have named one &lt;strong&gt;Dog Breakfast&lt;/strong&gt; and the other &lt;strong&gt;Dog Dinner&lt;/strong&gt; (&lt;em&gt;how creative, ik!&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/toggle.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-tag&quot; class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Setting up the Tag&lt;/h2&gt;
&lt;p&gt;To create a tag, open the configuration menu and select tags:
&lt;a href=&quot;https://my.home-assistant.io/redirect/tags/&quot;&gt;&lt;img src=&quot;https://my.home-assistant.io/badges/tags.svg&quot; alt=&quot;Open your Home Assistant instance and show your tags.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click &lt;strong&gt;Add tag&lt;/strong&gt; at the bottom right of the page.&lt;/p&gt;

&lt;h2 id=&quot;tag-1---counter---dog-meal-counter&quot;&gt;Tag 1 - Counter - Dog Meal Counter&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/tag.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;from-your-phone&quot;&gt;From your phone:&lt;/h3&gt;
&lt;p&gt;Go ahead and grab the tag that you plan on using, name it, and select &lt;strong&gt;create and write&lt;/strong&gt;. Finally, to write the information to the tag, simply place your phone on top of it.&lt;/p&gt;

&lt;h2 class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Creating the Automations&lt;/h2&gt;
&lt;p&gt;I am going to break up each automation into a set of triggers, conditions and actions.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Trigger:&lt;/strong&gt; Define what will set the rule off&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Condition:&lt;/strong&gt; Define what needs to be in place in order for the action to complete&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action:&lt;/strong&gt; A list of things the rule will actually do&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s start by opening up the menu to create automations:
&lt;a href=&quot;https://my.home-assistant.io/redirect/automations/&quot;&gt;&lt;img src=&quot;https://my.home-assistant.io/badges/automations.svg&quot; alt=&quot;Open your Home Assistant instance and show your automations.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create an automation, select &lt;em&gt;Add automation&lt;/em&gt; at the bottom right of the page.&lt;/p&gt;

&lt;h2 id=&quot;automation-1---counter---dog-meal-counter&quot;&gt;Automation 1 - Counter - Dog Meal Counter&lt;/h2&gt;

&lt;h3 id=&quot;gui&quot;&gt;GUI&lt;/h3&gt;
&lt;p&gt;(If you prefer to use YAML, skip to &lt;a href=&quot;#code-1&quot;&gt;code&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&quot;triggers&quot;&gt;Triggers&lt;/h4&gt;
&lt;p&gt;We will need to select the tag we setup &lt;a href=&quot;#setting-up-the-tag&quot;&gt;in the previous step&lt;/a&gt;. Anytime this tag is scanned, it will kick off the automation.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/trigger1.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conditions&quot;&gt;Conditions&lt;/h4&gt;
&lt;p&gt;Since the dog only eats two meals, we will set a &lt;em&gt;numeric state&lt;/em&gt; condition on our counter to &lt;strong&gt;below 2&lt;/strong&gt;. This will prevent the automation from running if the dog has already eaten twice.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/condition1.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;actions&quot;&gt;Actions&lt;/h4&gt;
&lt;p&gt;For the first action we want the automation to increment the counter (add one to it). This can be done with the &lt;em&gt;call service&lt;/em&gt; action type and selecting the &lt;strong&gt;counter.increment&lt;/strong&gt; service. Finally, we will want to make sure we target the meal counter.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/action1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we will use a &lt;em&gt;choose&lt;/em&gt; action, which acts like a simple if/else statement. If the counter’s value is 1, turn on &lt;strong&gt;Dog Breakfast&lt;/strong&gt;, otherwise (else) turn on &lt;strong&gt;Dog Dinner&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/action1-2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-1&quot;&gt;Code 1&lt;/h3&gt;
&lt;p&gt;Here’s the full code of what we just built:
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/dcf5c623bbd9860f9182fe26bebcff6f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Thats it! Now we can move onto the last automation.&lt;/p&gt;

&lt;h2 id=&quot;automation-2---counter---dog-meal-counter-reset&quot;&gt;Automation 2 - Counter - Dog Meal Counter Reset&lt;/h2&gt;

&lt;h3 id=&quot;gui-1&quot;&gt;GUI&lt;/h3&gt;
&lt;p&gt;(If you prefer to use YAML, skip to &lt;a href=&quot;#code-2&quot;&gt;code&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&quot;triggers-1&quot;&gt;Triggers&lt;/h4&gt;
&lt;p&gt;The trigger for this automation will be of the type &lt;em&gt;time&lt;/em&gt; and will be set to &lt;strong&gt;00:00:00&lt;/strong&gt;. This means the automation will start everyday at midnight.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/trigger2.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conditions-1&quot;&gt;Conditions&lt;/h4&gt;
&lt;p&gt;We don’t need to set anything here!&lt;/p&gt;

&lt;h4 id=&quot;actions-1&quot;&gt;Actions&lt;/h4&gt;

&lt;p&gt;We will need to do three things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reset the counter&lt;/li&gt;
  &lt;li&gt;Turn off Dog Breakfast&lt;/li&gt;
  &lt;li&gt;Turn off Dog Dinner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to reset the counter we will need to call the &lt;strong&gt;counter.reset&lt;/strong&gt; service with the meal counter as the selected target. Finally, in order to turn off the meal switches, you will need to call the &lt;strong&gt;input_boolean.turn_off&lt;/strong&gt; service targeted at each switch respectively.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/action2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-2&quot;&gt;Code 2&lt;/h3&gt;
&lt;p&gt;Voilà, we have working code!&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ursaMaj0r/cfd12763872bd591322f298e39f4ddec.js&quot;&gt;&lt;/script&gt;

&lt;h2 class=&quot;drac-heading drac-text-center drac-heading-xl drac-text-orange&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p class=&quot;drac-text drac-text-center&quot;&gt;To finish this one off, I created a card on the dashboard so the info is always visible!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; width=&quot;40%&quot; src=&quot;/assets/images/posts/did-you-feed-the-dog/card.png&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ursaMaj0r/bf31b13f0b8ab4dd9d0b1b87e12a90aa.js&quot;&gt;&lt;/script&gt;</content><author><name>Jeff</name></author><category term="Smart Home" /><category term="Doggo" /><category term="Home Assistant" /><category term="NFC Tags" /><category term="Automation" /><category term="Automate Everything" /><summary type="html">Have you ever forgotten if you fed the dog breakfast? Or maybe your dog is like mine and is always ready for another meal… Look no further!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ursamajor.technology/assets/images/posts/did-you-feed-the-dog/title.png" /><media:content medium="image" url="https://ursamajor.technology/assets/images/posts/did-you-feed-the-dog/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PS Clockify Part 1: Getting Started</title><link href="https://ursamajor.technology/2021/08/11/psclockify-pt1/" rel="alternate" type="text/html" title="PS Clockify Part 1: Getting Started" /><published>2021-08-11T00:00:00+00:00</published><updated>2021-08-11T00:00:00+00:00</updated><id>https://ursamajor.technology/2021/08/11/psclockify-pt1</id><content type="html" xml:base="https://ursamajor.technology/2021/08/11/psclockify-pt1/">&lt;p&gt;Need help managing your time? Are you having trouble balancing everything? Look no further. This is the beginning of a series of blog posts where I show you how to use PowerShell and PowerBI to automate time management!&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Time remains one of the few things in life that is impervious to outside influence. Everyday we are all alloted the same 24 hours to do with as we please. Being able to properly manage time can boost productivity and efficiency. About a year ago, I wrote a PowerShell API wrapper for Clockify, a free time management tool and wanted to take the time to show how it can be used to juggle the many day to day challenges we are faced with. We will start with importing and using the module and end up with a Power BI Dashboard that can be used to visually see where you are spending most of your time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Setting Up Clockify&lt;/h2&gt;
&lt;p&gt;First, we will need to create a Clockify account, which can be done &lt;a href=&quot;https://clockify.me/signup&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/signup.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next let’s generate an API key by clicking on the avatar at the top right and then &lt;strong&gt;Profile Settings&lt;/strong&gt; or by navigating directly to &lt;a href=&quot;https://clockify.me/user/settings&quot;&gt;https://clockify.me/user/settings&lt;/a&gt;. Scroll to the bottom of the page and click &lt;strong&gt;Generate&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/api.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will need the workspace name. This can be found on the &lt;strong&gt;General tab of Settings&lt;/strong&gt; or to the left of the upgrade button on the top bar. Feel free to edit the name to be whatever you like.
&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/workspace.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h2 class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Installing the Module&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ursaMaj0r/PSClockify&quot;&gt;Source Code&lt;/a&gt; - The module was written with PS Core and works on both Mac and Windows!&lt;/p&gt;

&lt;p&gt;Let’s download the code and import it as a PowerShell module using the following code:
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/33e970b84c9ea884a2f8b1cbdfb752a5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/install.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h2 class=&quot;drac-heading drac-heading-xl drac-text-orange&quot;&gt;Using the Module&lt;/h2&gt;

&lt;h3 id=&quot;connect-to-clockify-workspace&quot;&gt;Connect to Clockify Workspace&lt;/h3&gt;
&lt;p&gt;Let’s get connected to Clockify by running the following command (replacing with your API Key and Workspace name from above). If you want to confirm that you are connected, you can run the &lt;em&gt;Test-Session&lt;/em&gt; command.
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/8676fbb9741615b63992ae360654c43b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/connection.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-stuff&quot;&gt;Creating Stuff&lt;/h3&gt;
&lt;p&gt;Let’s get started by creating a project called chores. We can do that using the module with the following command:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ursaMaj0r/0722d1e01fee80990d6068060b3fe64b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And we can’t forget to add some tasks to the project:
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/9c684f21c70ac02023ba3f194043e907.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/create-stuff.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;event-tracking&quot;&gt;Event Tracking&lt;/h3&gt;
&lt;p&gt;Lastly, we need to be able to track the time we spend on each task. Let’s track some time doing laundry!&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ursaMaj0r/121ceeb238742e35127188218f12da89.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And when we are finished, we can simply run &lt;em&gt;Stop-Timer&lt;/em&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/images/posts/psclockify/timer.png&quot; class=&quot;center&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;and-more&quot;&gt;And More&lt;/h3&gt;
&lt;p&gt;The module can be used to do pretty much anything you can do in the UI. Try playing around with some other commands to create, set, or delete any object (Clients, Projects, Tags, Tasks, and Timers)!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Examples:
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/18d0d25594320b22a60d30aeb496bed6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;disconnecting-a-session&quot;&gt;Disconnecting a Session&lt;/h3&gt;
&lt;p&gt;When you are finished working with Clockify, the following command can be used to log out:
&lt;script src=&quot;https://gist.github.com/ursaMaj0r/c638b8f4f5b5ccdffc2ee7a8c3250e9c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 class=&quot;drac-heading drac-text-center&quot;&gt;Stay tuned for part two!&lt;/h1&gt;</content><author><name>Jeff</name></author><category term="Productivity" /><category term="PowerShell" /><category term="Clockify" /><category term="Automation" /><category term="Automate Everything" /><summary type="html">Need help managing your time? Are you having trouble balancing everything? Look no further. This is the beginning of a series of blog posts where I show you how to use PowerShell and PowerBI to automate time management!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ursamajor.technology/assets/images/posts/psclockify/title-image.png" /><media:content medium="image" url="https://ursamajor.technology/assets/images/posts/psclockify/title-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Genesis</title><link href="https://ursamajor.technology/2021/08/05/welcome/" rel="alternate" type="text/html" title="Genesis" /><published>2021-08-05T00:00:00+00:00</published><updated>2021-08-05T00:00:00+00:00</updated><id>https://ursamajor.technology/2021/08/05/welcome</id><content type="html" xml:base="https://ursamajor.technology/2021/08/05/welcome/">&lt;p&gt;Welcome to Automate Everything!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Here I will post all my thoughts around all things technology. I apologize in advance.&lt;/p&gt;

&lt;p&gt;-Jeff&lt;/p&gt;</content><author><name>Jeff</name></author><category term="General" /><summary type="html">Welcome to Automate Everything!</summary></entry></feed>